name: AWS CI/CD Workflow

on:
  push:
    branches:
      - main
      - stage

jobs:
  # Test:
  # runs-on: ubuntu-latest
  # steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Use Node 20+
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.11.1

  #   - name: Install pnpm
  #     run: npm install -g pnpm

  #   - name: Install project dependencies with pnpm
  #     run: pnpm install

  #   - name: Build check
  #     run: pnpm check

  #   - name: ðŸ”” âžœ Slack Notification
  #     if: failure()
  #     uses: act10ns/slack@v2
  #     with:
  #       status: ${{ job.status }}
  #       steps: ${{ toJson(steps) }}
  #       webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       channel: ${{ secrets.SLACK_CHANNEL }}
  #       config: .github/slack.yml

  Build:
    runs-on: ubuntu-latest
    # needs: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node 20+
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Retrieve secrets from AWS Secrets Manager
      - name: Get secrets by name and by ARN
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            ai-flowmapper/*
        parse-json-secrets: true

      - name: Print all secrets
        run: |
          echo "Example Public: ${{ steps.secrets.outputs.NUXT_PUBLIC_SUPABASE_URL }}"
          echo "Example Public 2: ${{ env.NUXT_PUBLIC_SUPABASE_URL }}"
          echo "Example Public 3: $NUXT_PUBLIC_SUPABASE_URL"

      # Create .env file and list all files in the current directory
      - name: Create .env file and list files
        run: |
          echo "Creating .env with secrets..."
          echo NUXT_PUBLIC_SUPABASE_URL=${{ env.NUXT_PUBLIC_SUPABASE_URL }} >> .env
          # Add other secrets as needed, for example:
          echo ANOTHER_SECRET=$ANOTHER_SECRET >> .env

          echo "Listing all files in the current directory..."
          ls -al
          cat .env
      # #

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: aiflowmapper
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: ðŸ”” âžœ Slack Notification
        if: always()
        uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: ${{ secrets.SLACK_CHANNEL }}
          config: .github/config/slack.yml

  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Deploying [Stage]
        uses: appleboy/ssh-action@v1.0.3
        if: github.ref == 'refs/heads/stage'
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Deploying aiflowmapper stack"
            cd ai-flow-mapper
            sh deploy.stage.sh

      - name: Deploying [Produciton]
        uses: appleboy/ssh-action@v1.0.3
        if: github.ref == 'refs/heads/main'
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Deploying aiflowmapper stack"
            cd ai-flow-mapper
            sh deploy.sh
